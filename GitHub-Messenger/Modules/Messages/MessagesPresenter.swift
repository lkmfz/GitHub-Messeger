//
//  MessagesPresenter.swift
//  GitHub-Messenger
//
//  Created by Luqman Fauzi on 4/3/2020.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MessagesPresenter {

    // MARK: - Private properties -

    private var messages: [Message] = Message.mock(count: 5)

    private unowned let view: MessagesViewInterface
    private let interactor: MessagesInteractorInterface
    private let wireframe: MessagesWireframeInterface

    // MARK: - Lifecycle -

    init(view: MessagesViewInterface, interactor: MessagesInteractorInterface, wireframe: MessagesWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension MessagesPresenter: MessagesPresenterInterface {

    func viewDidLoad() {
        view.setupViews()
        view.scrollToBottom(animated: false)
    }

    func insertNewTextMessage(_ text: String) {
        let message = Message(id: 1.description, content: MessageType.text(text), direction: .outgoing, sentAt: Date())
        view.performBatchUpdate(message)

        if let counterMessage = Message.duplicateOppositeMessage(message) {
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                self?.view.performBatchUpdate(counterMessage)
            }
        }
    }

    func appendNewMessage(_ message: Message) {
        messages.append(message)
    }

    func keyboardWillShow() {
        view.scrollToBottom(animated: true)
    }

    func showErrorMessage(_ message: String) {
        view.showAlertMessage(message)
    }

    func numberOfSections() -> Int {
        return messages.count
    }

    func numberOrItems(in section: Int) -> Int {
        return 1
    }

    func item(at indexPath: IndexPath) -> MessageContentItemInterface {
        return messages[indexPath.section]
    }
}
