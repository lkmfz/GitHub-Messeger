//
//  UsersViewController.swift
//  GitHub-Messenger
//
//  Created by Luqman Fauzi on 3/3/2020.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class UsersViewController: UIViewController {

    // MARK: - Private properties -

    private lazy var emptyResultView: PlaceholderEmptyView = {
        let view = PlaceholderEmptyView()
        view.isHidden = true
        view.tapActionHandler = presenter.retryOnInitialLoad
        return view
    }()

    private lazy var loadingView: LoadingView = {
        let view = LoadingView()
        view.isHidden = true
        return view
    }()

    private lazy var paginationView: PaginationLoadingView = {
        let view = PaginationLoadingView()
        view.frame = CGRect(origin: .zero, size: CGSize(width: .greatestFiniteMagnitude, height: 80.0))
        view.tapActionHandler = presenter.retryOnFailedToLoadNextPage
        return view
    }()

    private lazy var tableView: TableView = {
        let view = TableView()
        view.register(cellWithClass: UsersContentCell.self)
        view.dataSource = self
        view.delegate = self
        view.isHidden = false
        view.refreshControl = UIRefreshControl()
        view.refreshControl?.addTarget(self, action: #selector(refreshPage), for: .valueChanged)
        view.tableFooterView = paginationView
        return view
    }()

    // MARK: - Public properties -

    var presenter: UsersPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
    }

    @objc private func refreshPage(_ sender: UIRefreshControl) {
        presenter.refreshPage(sender)
    }
}

// MARK: - Extensions -

extension UsersViewController: UsersViewInterface {

    func setupViews() {
        title = "GitHub Messenger"
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)

        view.backgroundColor = .white
        view.addSubview(emptyResultView)
        view.addSubview(tableView)
        view.addSubview(loadingView)
        emptyResultView.layoutToEdges()
        tableView.layoutToEdges()
        loadingView.layoutToCenter(of: view, size: CGSize(width: 80.0, height: 80.0))
    }

    func setLoadingView(_ show: Bool) {
        if show {
            loadingView.start()
        } else {
            loadingView.stop()
        }
    }

    func setListView(_ show: Bool) {
        tableView.isHidden = !show
    }

    func setEmptyListView(_ show: Bool) {
        if show {
            emptyResultView.show(title: "Try again?", message: "🐙😿")
        } else {
            emptyResultView.hide()
        }
    }

    func setLoadingPaginationView(_ show: Bool) {
        if show {
            paginationView.startAnimating()
        } else {
            paginationView.stopAnimating()
        }
    }
    
    func setLoadingPaginationViewWithRetry(_ show: Bool) {
        if show {
            paginationView.showRetryButton()
        } else {
            paginationView.hideRetryButton()
        }
    }

    func showAlertMessage(_ message: String) {
        let alertView = UIAlertController(title: "Oopss, sorry.. 😿", message: message, preferredStyle: .alert)
        let action = UIAlertAction(title: "OK", style: .default, handler: nil)
        alertView.addAction(action)
        present(alertView, animated: true, completion: nil)
    }

    func reloadData() {
        tableView.reloadData()
    }
}

// MARK: UITableView's data source & delegate

extension UsersViewController: UITableViewDataSource, UITableViewDelegate {

    func numberOfSections(in tableView: UITableView) -> Int {
        return presenter.numberOfSections()
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.numberOrItems(in: section)
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withClass: UsersContentCell.self, for: indexPath)
        let item = presenter.item(at: indexPath)
        cell.configure(item)
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        presenter.didSelectItem(at: indexPath)
    }

    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        presenter.checkIfNeedsToLoadNextPage(
            offsetY: scrollView.contentOffset.y,
            contentSizeHeight: scrollView.contentSize.height,
            frameHeight: scrollView.bounds.height
        )
    }
}
